import java.io.*;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.StringTokenizer;
 
/**
 * Created by Sophy titova on 08.05.2016.
 */
public class task {
    static boolean was[];
    static int number [] ;
    static ArrayList<ArrayList<Integer>> edges;
 
    public static void main(String[] args) throws IOException {
        BufferedReader in = new BufferedReader(new FileReader("components.in"));
        PrintWriter out = new PrintWriter(new File("components.out"));
        StringTokenizer st = new StringTokenizer(in.readLine());
        int n = Integer.parseInt(st.nextToken());
        int m = Integer.parseInt(st.nextToken());
        was = new boolean[n];
        number = new int [n];
        edges = new ArrayList<>();
 
        for (int i = 0; i < n; i++) {
            edges.add(new ArrayList<>(0));
        }
 
 
        for (int i = 0; i < m; i++) {
            StringTokenizer str = new StringTokenizer(in.readLine());
            int u = Integer.parseInt(str.nextToken()) - 1;
            int v = Integer.parseInt(str.nextToken()) - 1;
 
            edges.get(u).add(v);
            edges.get(v).add(u);
        }
        int count = 1;
        for (int i = 0; i < n; ++i)
            was[i] = false;
        for (int i = 0; i < n; ++i) {
            if (!was[i]) {
                dfs(i, count);
                count++;
            }
        }
        out.println(count-1);
        for ( int i = 0; i < n; i ++) {
            out.print(number[i] + " ");
        }
        out.close();
    }
    public static void dfs(int v, int start) {
        was[v] = true;
        number[v] = start;
        //components[start].add(v);
        for (int  i = 0; i < edges.get(v).size(); ++i) {
            int to = edges.get(v).get(i);
            if (was[to]==false)
                dfs(to, start);
        }
 
    }
 
 
}
